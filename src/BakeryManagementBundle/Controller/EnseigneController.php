<?php

namespace BakeryManagementBundle\Controller;

use BakeryManagementBundle\BakeryManagementBundle;
use BakeryManagementBundle\Entity\Rating;
use BakeryManagementBundle\Form\BakeryType;
use BakeryManagementBundle\Form\EnseigneType;
use Proxies\__CG__\BakeryManagementBundle\Entity\Enseigne;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;

class EnseigneController extends Controller
{
    public function addAction(Request $request)
    {
        $enseigne = new Enseigne();
        $form = $this->createForm(EnseigneType::class, $enseigne);
        $form->handleRequest($request);
        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $enseigne->setUser($this->get('security.token_storage')->getToken()->getUser());

            $file = $enseigne->getLogo();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            $file->move($this->getParameter('brochures_directory'), $fileName);

            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $enseigne->setLogo($fileName);
            $em->persist($enseigne);
            $em->flush();
            // ... persist the $product variable or any other work

            return $this->redirectToRoute("back_office_homepage_brand");
        }
        return $this->render('BakeryManagementBundle:Enseigne:start.html.twig',
            array(
                "form" => $form->createView()
            ));
        /**
         * @return string
         */

    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function testAction()
    {
        $user = $this->get('security.token_storage')->getToken()->getUser();

        $em = $this->getDoctrine()->getManager();
        $enseigne = $em->getRepository('BakeryManagementBundle:Enseigne')->find($user->getId());
        //$p = $em->getRepository('BakeryManagementBundle:Bakery')->findBy(array('enseigne' => $enseigne));
        $enseignes = $em->getRepository('BakeryManagementBundle:Enseigne')->findAll();
        foreach ($enseignes as $e) {
            if($e->getUser()->getId() == $user->getId())
            {
                return $this->redirectToRoute("back_office_homepage_brand");
            }
        }

//        if ($enseignes->getId() != null) {
//            return $this->redirectToRoute("bakery_add");
//        }

        return $this->redirectToRoute("bakery_add");
    }

    public function listAction(Request $request)
    {
        $user = $this->get('security.token_storage')->getToken()->getUser();

        $em = $this->getDoctrine()->getManager();
        $enseignes = $em->getRepository('BakeryManagementBundle:Enseigne')->findBy(array('user' => $user));
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate($enseignes,
            $request->query->getInt('page', 1)/*page number*/,
            2/*limit per page*/);
        return $this->render('BakeryManagementBundle:Enseigne:list.html.twig', array("enseignes" => $enseignes,'pagination' => $pagination));
    }
    public function aboutAction($id)
    {
        $user = $this->get('security.token_storage')->getToken()->getUser();

        $em = $this->getDoctrine()->getManager();
        $enseignes = $em->getRepository('BakeryManagementBundle:Enseigne')->find($id);
        $rating = $em->getRepository('BakeryManagementBundle:Rating')->findBy(array('enseigne' => $enseignes));
        $rating2 = $em->getRepository('BakeryManagementBundle:Rating')->findBy(array('user'=>$user,'enseigne'=>$enseignes));

        if ($rating2==null){
            $test="false";
        }
        else{
            $test="true";
        }

        $nbr_vote = sizeof($rating);
        $myNote = 0;
        foreach ($rating as $r)
        {
            $myNote += $r->getNote();
        }

        if($nbr_vote != 0)
        {
            $note = $myNote/$nbr_vote;
        }else{
            $note=0;
        }
        $data = $em->getRepository('ProductManagementBundle:Product')->getTop3SellsByBrand($enseignes);


        return $this->render('BakeryManagementBundle:Enseigne:aboutbrand.html.twig',
            array("enseignes" => $enseignes,'note' => round($note),
            "nbvote"=>$nbr_vote,'data' => $data,'test'=>$test));
    }

    public function listfrontAction()
    {

        $em = $this->getDoctrine()->getManager();
        $enseignes = $em->getRepository('BakeryManagementBundle:Enseigne')->findAll();
        return $this->render('BakeryManagementBundle:Enseigne:listfront.html.twig', array("enseignes" => $enseignes));
    }
    public function listbackAction()
    {
        $user = $this->get('security.token_storage')->getToken()->getUser();

        $em = $this->getDoctrine()->getManager();
        $enseignes = $em->getRepository('BakeryManagementBundle:Enseigne')->findBy(array('user' => $user));
        $brands=$em->getRepository('BakeryManagementBundle:Bakery')->findByenseigne($enseignes);

        return $this->render('BakeryManagementBundle:Enseigne:listback.html.twig', array("brands" => $brands,"enseigne"=>$enseignes));
    }
    public function updateAction(Request $req)
    {
        $id=$req->get('id');
        $em=$this->getDoctrine()->getManager();
        $enseignes=$em->getRepository("BakeryManagementBundle:Enseigne")->find($id); //ici $modele est un objet et non pas un tab
        $form=$this->createForm(EnseigneType::class,$enseignes);
        $form->handleRequest($req); //controler si le 1ere visite au sys ou 2eme
        if($form->isValid()){ // acceder au entity
            $file = $enseignes->getLogo();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            // Move the file to the directory where brochures are stored
            $file->move($this->getParameter('brochures_directory'), $fileName);
            // Update the 'brochure' property to store the PDF file name
            // instead of its contents
            $enseignes->setLogo($fileName);
            $em->persist($enseignes); //appartient au getmanager
            $em->flush();
            return $this->redirectToRoute("bakery_list");
        }
        return $this->render('BakeryManagementBundle:Enseigne:update.html.twig',array('form'=>$form->createView()));

    }

    public function rateAction(Request $request)
    {
        //die("aa");
        $note = $request->request->get('n');
        $ens = $request->request->get('d');//---get the reg of search (GET)
        $user = $this->get('security.token_storage')->getToken()->getUser();

        $em = $this->getDoctrine()->getManager();
        $enseigne = $em->getRepository('BakeryManagementBundle:Enseigne')->find($ens);
        $nbr_vote = sizeof($em->getRepository('BakeryManagementBundle:Rating')->findBy(array('enseigne' => $enseigne)));
        $rating = new Rating();
        $rating->setEnseigne($enseigne);
        $rating->setUser($user);
        $rating->setNote($note);
        //$rating->setNbrVote($nbr_vote++);
        $em->persist($rating);
        $em->flush();
        return new JsonResponse('ok');
    }
}